generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  cpf               String             @unique
  email             String
  password          String
  refresh_token     RefreshToken?
  password_token    PasswordToken?
  show_ad           ShowAd?
  pushTokens        PushToken[]
  userNotifications UserNotification[]  // ← nova relação

  @@map("users")
}

model Emails {
  id            String @id @default(uuid())
  censoredEmail String
  email         String

  @@map("emails")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique

  @@map("refresh_token")
}

model PasswordToken {
  id        String   @id @default(uuid())
  expiresIn DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("password_token")
}

model ShowAd {
  id        String   @id @default(uuid())
  expiresIn DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  show      Boolean  @default(true)

  @@map("show_ad")
}

model PushToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("push_tokens")
}

model Notification {
  id                 String             @id @default(uuid())
  title              String
  body               String?
  data               Json?
  status             String             @default("pending")
  tokens             Int                @default(0)
  receipts           Json?              
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userNotifications  UserNotification[] 

  @@index([createdAt])
  @@map("notifications")
}

model UserMetadata {
  userId      String   @id
  hasOpenBill Boolean  @default(false)
  address     String?
  updatedAt   DateTime @updatedAt

  @@map("user_metadata")
}

model UserNotification {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  read           Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())

  @@map("user_notifications")
  @@index([userId])
  @@index([notificationId])
}
